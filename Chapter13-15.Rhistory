return(result)
}
}
multiples3(foo,diag(2))
multiples3(bar,diag(2))
multiples3(baz,diag(2))
myfibplot <- function(thresh,plotit=TRUE,...){
fibseq <- c(1,1)
counter <- 2
repeat{
fibseq <- c(fibseq,fibseq[counter-1]+fibseq[counter])
counter <- counter+1
if(fibseq[counter]>thresh){
break
}
}
if(plotit){
plot(1:length(fibseq),fibseq,...)
} else {
return(fibseq)
}
}
myfibplot(150)
myfibplot(150,type="b",pch=4,lty=2,main="Terms of the Fibonacci sequence",
ylab="Fibonacci number",xlab="Term (n)")
unpackme <- function(...){
x <- list(...)
cat("Here is ... in its entirety as a list:\n")
print(x)
cat("\nThe names of ... are:",names(x),"\n\n")
cat("\nThe classes of ... are:",sapply(x,class))
}
unpackme(aa=matrix(1:4,2,2),bb=TRUE,cc=c("two","strings"),
dd=factor(c(1,1,2,1)))
multiples_helper_ext <- function(x,matrix.flags,mat){
indexes <- which(matrix.flags)
counter <- 0
result <- list()
for(i in indexes){
temp <- x[[i]]
if(ncol(temp)==nrow(mat)){
counter <- counter+1
result[[counter]] <- temp%*%mat
}
}
return(list(result,counter))
}
multiples4 <- function(x,mat,str1="no valid matrices",str2=str1){
matrix.flags <- sapply(x,FUN=is.matrix)
if(!any(matrix.flags)){
return(str1)
}
helper.call <- multiples_helper_ext(x,matrix.flags,mat)
result <- helper.call[[1]]
counter <- helper.call[[2]]
if(counter==0){
return(str2)
} else {
return(result)
}
}
multiples5 <- function(x,mat,str1="no valid matrices",str2=str1){
matrix.flags <- sapply(x,FUN=is.matrix)
if(!any(matrix.flags)){
return(str1)
}
multiples_helper_int <- function(x,matrix.flags,mat){
indexes <- which(matrix.flags)
counter <- 0
result <- list()
for(i in indexes){
temp <- x[[i]]
if(ncol(temp)==nrow(mat)){
counter <- counter+1
result[[counter]] <- temp%*%mat
}
}
return(list(result,counter))
}
helper.call <- multiples_helper_int(x,matrix.flags,mat)
result <- helper.call[[1]]
counter <- helper.call[[2]]
if(counter==0){
return(str2)
} else {
return(result)
}
}
foo <- matrix(c(2,3,3,4,2,4,7,3,3,6,7,2),3,4)
foo
apply(foo,MARGIN=2,FUN=function(x){sort(rep(x,2))})
myfibrec <- function(n){
if(n==1||n==2){
return(1)
} else {
return(myfibrec(n-1)+myfibrec(n-2))
}
}
myfibrec(5)
warn_test <- function(x){
if(x<=0){
warning("'x' is less than or equal to 0 but setting it to 1 and
continuing")
x <- 1
}
return(5/x)
}
error_test <- function(x){
if(x<=0){
stop("'x' is less than or equal to 0... TERMINATE")
}
return(5/x)
}
warn_test(0)
error_test(0)
myfibrec2 <- function(n){
if(n<0){
warning("Assuming you meant 'n' to be positive -- doing that instead")
n <- n*-1
} else if(n==0){
stop("'n' is uninterpretable at 0")
}
if(n==1||n==2){
return(1)
} else {
return(myfibrec2(n-1)+myfibrec2(n-2))
}
}
myfibrec2(6)
myfibrec2(-3)
myfibrec2(0)
attempt1 <- try(myfibrec2(0),silent=TRUE)
attempt1
attempt2 <- try(myfibrec2(6),silent=TRUE)
attempt2
myfibvector <- function(nvec){
nterms <- length(nvec)
result <- rep(0,nterms)
for(i in 1:nterms){
result[i] <- myfibrec2(nvec[i])
}
return(result)
}
foo <- myfibvector(nvec=c(1,2,10,8))
foo
bar <- myfibvector(nvec=c(3,2,7,0,9,13))
myfibvectorTRY <- function(nvec){
nterms <- length(nvec)
result <- rep(0,nterms)
for(i in 1:nterms){
attempt <- try(myfibrec2(nvec[i]),silent=T)
if(class(attempt)=="try-error"){
result[i] <- NA
} else {
result[i] <- attempt
}
}
return(result)
}
baz <- myfibvectorTRY(nvec=c(3,2,7,0,9,13))
baz
attempt3 <- try(myfibrec2(-3),silent=TRUE)
attempt3
attempt4 <- suppressWarnings(myfibrec2(-3))
attempt4
Sys.sleep(3)
sleep_test <- function(n){
result <- 0
for(i in 1:n){
result <- result + 1
Sys.sleep(0.5)
}
return(result)
}
sleep_test(8)
prog_test <- function(n){
result <- 0
progbar <- txtProgressBar(min=0,max=n,style=1,char="=")
for(i in 1:n){
result <- result + 1
Sys.sleep(0.5)
setTxtProgressBar(progbar,value=i)
}
close(progbar)
return(result)
}
prog_test(8)
Sys.time()
t1 <- Sys.time()
Sys.sleep(3)
t2 <- Sys.time()
t2-t1
t1 <- Sys.time()
Sys.sleep(3)
t2 <- Sys.time()
t2-t1
search()
foo <- c(4,1.5,3)
sum(foo)
sum <- function(x){
result <- 0
for(i in 1:length(x)){
result <- result + x[i]^2
}
return(result)
}
sum(foo)
base::sum(foo)
rm(sum)
library("spatstat")
install.packages("spatstat")
install.packages("spatstat")
library("spatstat")
library("car")
cats <- "meow"
library("MASS")
search()
detach("package:car",unload=TRUE)
search()
foo <- data.frame(surname=c("a","b","c","d"),
sex=c(0,1,1,0),height=c(170,168,181,180),
stringsAsFactors=F)
foo
attach(foo)
search()
surname
bar <- data.frame(surname=c("e","f","g","h"),
sex=c(1,0,1,0),weight=c(55,70,87,79),
stringsAsFactors=F)
bar
attach(bar)
search()
height
detach(foo)
search()
save.image("C:/Users/Min Jin/Desktop/Chapter10-12.RData")
savehistory("C:/Users/Min Jin/Desktop/Chapter10-12_history.Rhistory")
spread <- read.xlxs(file="C:\Users\Min Jin\Desktop\advancedstatistic\FINGERalmostBroken.xlsx",header=FALSE,stringsAsFactors=TRUE)
spread <- read.xlxs(file="C:/Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.xlsx",header=FALSE,stringsAsFactors=TRUE)
spread <- FINGERalmostBroken.xlsx(file="C:\Users\Min Jin\Desktop\advancedstatistic\FINGERalmostBroken.xlsx",header=FALSE,stringsAsFactors=TRUE)
spread <- FINGERalmostBroken.xlsx(file="C:/Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.xlsx",header=FALSE,stringsAsFactors=TRUE)
read.xlsx(file.choose(C:/Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.xlsx), sheetIndex = 1)
read.xlsx(file.choose = C:/Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.xlsx), sheetIndex = 1)
read.xlsx(file.choose = "C:/Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.xlsx"", sheetIndex = 1)
s
s
quit
exit
exit()
weather <- read.csv(file="C:/Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.csv")
weather <- read.csv(file="/Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.csv")
weather <- read.xlsx(file="/Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.xlsx")
library(readxl)
weather <- read.xlsx(file="/Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.xlsx")
weather <- read.csv(file="C:/Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.csv")
weather <- read.csv(file="C:/Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.csv", header=T)
weather <- read.csv(file="C:/Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.csv")
weather <- read.csv(file="Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.csv")
file.choose()
w <- read.csv(file="Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.csv")
w <- read.csv(file="Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.csv")
w <- read.csv(file="/Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.csv")
w <- read.csv(file="/Users/Min Jin/Desktop/advancedstatistic/FINGERalmostBroken.csv")
w <- read.csv(file="/Users/Min Jin/Desktop/advancedstatistic/cjp.csv")
w <- read.csv(file="/Users/Min Jin/Desktop/advancedstatistic/ExportedResults.csv")
savehistory("C:/Users/Min Jin/Desktop/advancedstatistic/assignment.Rhistory")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
chickwts[1:5,]
chickwts$weight
chickwts$feed
quakes[1:5,]
plot(quakes$long,quakes$lat,xlab="Longitude",ylab="Latitude")
xdata <- c(2,4.4,3,3,2,2.2,2,4)
x.bar <- mean(xdata)
 x.bar
m.bar <- median(xdata)
m.bar
xtab <- table(xdata)
xtab
min(xdata)
max(xdata)
range(xdata)
max(xtab)
d.bar <- xtab[xtab==max(xtab)]
d.bar
mean(chickwts$weight)
median(chickwts$weight)
Qtab <- table(quakes$mag)
Qtab[Qtab==max(Qtab)]
mean(c(1,4,NA))
mean(c(1,4,NaN))
mean(c(1,4,NA),na.rm=TRUE)
mean(c(1,4,NaN),na.rm=TRUE)
mean(chickwts$weight[chickwts$feed=="casein"])
mean(chickwts$weight[chickwts$feed=="horsebean"])
mean(chickwts$weight[chickwts$feed=="linseed"])
mean(chickwts$weight[chickwts$feed=="meatmeal"])
mean(chickwts$weight[chickwts$feed=="soybean"])
mean(chickwts$weight[chickwts$feed=="sunflower"])
tapply(chickwts$weight,INDEX=chickwts$feed,FUN=mean)
table(chickwts$feed)
table(chickwts$feed)/nrow(chickwts)
sum(chickwts$feed=="soybean")/nrow(chickwts)
mean(chickwts$feed=="soybean")
mean(chickwts$feed=="soybean"|chickwts$feed=="horsebean")
tapply(chickwts$weight,INDEX=chickwts$feed,
FUN=function(x) length(x)/nrow(chickwts))
round(table(chickwts$feed)/nrow(chickwts),digits=3)
round(mean(chickwts$feed=="soybean")*100,1)
xdata <- c(2,4.4,3,3,2,2.2,2,4)
quantile(xdata,prob=0.8)
quantile(xdata,prob=c(0,0.25,0.5,0.75,1))
summary(xdata)
quantile(chickwts$weight,prob=c(0.25,0.75))
summary(quakes$mag[quakes$depth<400])
xdata <- c(2,4.4,3,3,2,2.2,2,4)
ydata <- c(1,4.4,1,3,2,2.2,2,7)
mean(xdata)
mean(ydata)
plot(xdata,type="n",xlab="",ylab="data vector",yaxt="n",bty="n")
abline(h=c(3,3.5),lty=2,col="gray")
abline(v=2.825,lwd=2,lty=3)
plot(xdata,type="n",xlab="",ylab="data vector",yaxt="n",bty="n")
abline(v=2.825,lwd=2,lty=3)
text(c(0.8,0.8),c(3,3.5),labels=c("x","y"))
points(jitter(c(xdata,ydata)),c(rep(3,length(xdata)),
rep(3.5,length(ydata))))
plot.new(xdata,type="n",xlab="",ylab="data vector",yaxt="n",bty="n")
plot(xdata,type="n",xlab="",ylab="data vector",yaxt="n",bty="n")
abline(h=c(3,3.5),lty=2,col="gray")
points(jitter(c(xdata,ydata)),c(rep(3,length(xdata)),
rep(3.5,length(ydata))))
var(xdata)
 sd(xdata)
IQR(xdata)
 sqrt(var(xdata))
 as.numeric(quantile(xdata,0.75)-quantile(xdata,0.25))
sd(ydata)
 IQR(ydata)
sd(chickwts$weight)
IQR(quakes$mag[quakes$depth<400])
xdata <- c(2,4.4,3,3,2,2.2,2,4)
ydata <- c(1,4.4,1,3,2,2.2,2,7)
cov(xdata,ydata)
cov(xdata,ydata)/(sd(xdata)*sd(ydata))
cor(xdata,ydata)
plot(xdata,ydata,pch=13,cex=1.5)
 plot(quakes$mag,quakes$stations,xlab="Magnitude",ylab="No. of stations")
cov(quakes$mag,quakes$stations)
cor(quakes$mag,quakes$stations)
 foo <- c(0.6,-0.6,0.1,-0.2,-1.0,0.4,0.3,-1.8,1.1,6.0)
plot(foo,rep(0,10),yaxt="n",ylab="",bty="n",cex=2,cex.axis=1.5,cex.lab=1.5)
abline(h=0,col="gray",lty=2)
arrows(5,0.5,5.9,0.1,lwd=2)
text(5,0.7,labels="outlier?",cex=3)
 bar <- c(0.1,0.3,1.3,0.6,0.2,-1.7,0.8,0.9,-0.8,-1.0)
 baz <- c(-0.3,0.9,2.8,2.3,1.2,-4.1,-0.4,4.1,-2.3,-100.0)
plot(bar,baz,axes=T,cex=2,cex.axis=1.5,cex.lab=1.5)
arrows(-0.5,-80,-0.94,-97,lwd=2)
plot(bar,baz,axes=T,cex=2,cex.axis=1.5,cex.lab=1.5)arrows(-0.5,-80,-0.94,-97,lwd=2)
plot(bar,baz,axes=T,cex=2,cex.axis=1.5,cex.lab=1.5)arrows(-0.5,-80,-0.94,-97,lwd=2)
plot(bar,baz,axes=T,cex=2,cex.axis=1.5,cex.lab=1.5)
plot(bar,baz,axes=T,cex=2,cex.axis=1.5,cex.lab=1.5)
 mean(foo)
 mean(foo[-10])
cor(bar,baz)
cor(bar[-10],baz[-10])
mtcars[1:5,]
cyl.freq <- table(mtcars$cyl)
cyl.freq
barplot(cyl.freq)
table(mtcars$cyl[mtcars$am==0])
table(mtcars$cyl[mtcars$am==1])
cyl.freq.matrix <- table(mtcars$am,mtcars$cyl)
 cyl.freq.matrix
 barplot(cyl.freq.matrix,beside=TRUE,horiz=TRUE,las=1,
main="Performance car counts\nby transmission and cylinders",
names.arg=c("V4","V6","V8"),legend.text=c("auto","manual"),
args.legend=list(x="bottomright"))
qplot(factor(mtcars$cyl),geom="bar")
utils:::menuInstallPkgs()
qplot(factor(mtcars$cyl),geom="bar")
library("ggplot2")
qplot(factor(mtcars$cyl),geom="bar")
qplot(factor(mtcars$cyl),geom="blank",fill=factor(mtcars$am),xlab="",
ylab="",main="Performance car counts\nby transmission and cylinders")
+ geom_bar(position="dodge")
+ scale_x_discrete(labels=c("V4","V6","V8"))
+ scale_y_continuous(breaks=seq(0,12,2))
+ theme_bw() + coord_flip()
+ scale_fill_grey(name="Trans.",labels=c("auto","manual"))
qplot(factor(mtcars$cyl),geom="blank",fill=factor(mtcars$am),xlab="",
ylab="",main="Performance car counts\nby transmission and cylinders")
+ geom_bar(position="dodge")scale_x_discrete(labels=c("V4","V6","V8"))scale_y_continuous(breaks=seq(0,12,2))theme_bw() + coord_flip()scale_fill_grey(name="Trans.",labels=c("auto","manual"))
qplot(factor(mtcars$cyl),geom="blank",fill=factor(mtcars$am),xlab="",ylab="",main="Performance car counts\nby transmission and cylinders") geom_bar(position="dodge")scale_x_discrete(labels=c("V4","V6","V8"))scale_y_continuous(breaks=seq(0,12,2))theme_bw() + coord_flip()scale_fill_grey(name="Trans.",labels=c("auto","manual"))
 pie(table(mtcars$cyl),labels=c("V4","V6","V8"),
col=c("white","gray","black"),main="Performance cars by cylinders")
mtcars$hp
hist(mtcars$hp)
hist(mtcars$hp,breaks=seq(0,400,25),col="gray",main="Horsepower",xlab="HP")
 abline(v=c(mean(mtcars$hp),median(mtcars$hp)),lty=c(2,3),lwd=2)
 qplot(mtcars$hp)
qplot(mtcars$hp,geom="blank",main="Horsepower",xlab="HP")
+ geom_histogram(color="black",fill="white",breaks=seq(0,400,25),
closed="right")
+ geom_vline(mapping=aes(xintercept=c(mean(mtcars$hp),median(mtcars$hp)),
linetype=factor(c("mean","median"))),show.legend=TRUE)
+ scale_linetype_manual(values=c(2,3)) + labs(linetype="")
qplot(mtcars$hp,geom="blank",main="Horsepower",xlab="HP"),geom_histogram(color="black",fill="white",breaks=seq(0,400,25),
qplot(mtcars$hp,geom="blank",main="Horsepower",xlab="HP")
geom_histogram(color="black",fill="white",breaks=seq(0,400,25),
closed="right")
hist(quakes$mag)
boxplot(quakes$mag)
 stations.fac <- cut(quakes$stations,breaks=c(0,50,100,150))
stations.fac[1:5]
boxplot(quakes$mag~stations.fac,
xlab="# stations detected",ylab="Magnitude",col="gray")
qplot(stations.fac,quakes$mag,geom="boxplot",
xlab="# stations detected",ylab="Magnitude")
iris[1:5,]
plot(iris[,4],iris[,3],type="n",xlab="Petal Width (cm)",
ylab="Petal Length (cm)")
points(iris[iris$Species=="setosa",4],
iris[iris$Species=="setosa",3],pch=19,col="black")
points(iris[iris$Species=="virginica",4],
iris[iris$Species=="virginica",3],pch=19,col="gray")
> plot(iris[,4],iris[,3],type="n",xlab="Petal Width (cm)",
ylab="Petal Length (cm)")> plot(iris[,4],iris[,3],type="n",xlab="Petal Width (cm)",
> plot(iris[,4],iris[,3],type="n",xlab="Petal Width (cm)",
plot(iris[,4],iris[,3],type="n",xlab="Petal Width (cm)",
ylab="Petal Length (cm)")
plot{(iris[,4],iris[,3],type="n",xlab="Petal Width (cm)",
ylab="Petal Length (cm)")
plot{(iris[,4],iris[,3],type="n",xlab="Petal Width (cm)",ylab="Petal Length (cm)")points(iris[iris$Species=="setosa",4],
iris[iris$Species=="setosa",3],pch=19,col="black")}
plot{(iris[,4],iris[,3],type="n",xlab="Petal Width (cm)",ylab="Petal Length (cm)")points(iris[iris$Species=="setosa",4],iris[iris$Species=="setosa",3],pch=19,col="black")}
plot{(iris[,4],iris[,3],type="n",xlab="Petal Width (cm)",ylab="Petal Length (cm)")points(iris[iris$Species=="setosa",4],iris[iris$Species=="setosa",3],pch=19,col="black")}
 iris_pch <- rep(19,nrow(iris))
 iris_pch[iris$Species=="versicolor"] <- 1
iris_col <- rep("black",nrow(iris))
iris_col[iris$Species=="virginica"] <- "gray"
 plot(iris[,4],iris[,3],col=iris_col,pch=iris_pch,
xlab="Petal Width (cm)",ylab="Petal Length (cm)")
 pairs(iris[,1:4],pch=iris_pch,col=iris_col,cex=0.75)
qplot(iris[,4],iris[,3],xlab="Petal width",ylab="Petal length",
shape=iris$Species)
+ scale_shape_manual(values=4:6) + labs(shape="Species")
qplot(iris[,4],iris[,3],xlab="Petal width",ylab="Petal length",
shape=iris$Species)
+ scale_shape_manual(values=4:6) + labs(shape="Species")
qplot(iris[,4],iris[,3],xlab="Petal width",ylab="Petal length",
shape=iris$Species)+ scale_shape_manual(values=4:6) + labs(shape="Species")
 ggpairs(iris,mapping=aes(col=Species),axisLabels="internal")
utils:::menuInstallPkgs()
library("GGally")
 ggpairs(iris,mapping=aes(col=Species),axisLabels="internal")
(2/3)*(1/2)
(1/2)+(1/2)-(1/3)
X.outcomes <- c(-4,0,1,8)
X.prob <- c(0.32,0.48,0.15,0.05)
barplot(X.prob,ylim=c(0,0.5),names.arg=X.outcomes,space=0,
xlab="x",ylab="Pr(X = x)")
X.cumul <- cumsum(X.prob)
X.cumul
barplot(X.cumul,names.arg=X.outcomes,space=0,xlab="x",ylab="Pr(X <= x)")
mu.X <- sum(X.outcomes*X.prob)
mu.X
var.X <- sum((X.outcomes-mu.X)^2*X.prob)
var.X
sd.X <- sqrt(var.X)
sd.X
w <- seq(35,95,by=5)
w
lower.w <- w>=40 & w<=65
lower.w
upper.w <- w>65 & w<=90
upper.w
fw <- rep(0,length(w))
fw[lower.w] <- (w[lower.w]-40)/625
fw[upper.w] <- (90-w[upper.w])/625
fw
plot(w,fw,type="l",ylab="f(w)")
abline(h=0,col="gray",lty=2)
plot(w,fw,type="l",ylab="f(w)")+abline(h=0,col="gray",lty=2)
plot{(w,fw,type="l",ylab="f(w)")+abline(h=0,col="gray",lty=2)}
plot {(w,fw,type="l",ylab="f(w)")+abline(h=0,col="gray",lty=2)}
plot (w,fw,type="l",ylab="f(w)")+abline(h=0,col="gray",lty=2)
utils:::menuInstallPkgs()
0.5*50*0.04
 fw.specific <- (55.2-40)/625
fw.specific
 fw.specific.area <- 0.5*15.2*fw.specific
fw.specific.area
fw.specific.vertices <- rbind(c(40,0),c(55.2,0),c(55.2,fw.specific))
fw.specific.vertices
plot(w,fw,type="l",ylab="f(w)")+ abline(h=0,col="gray",lty=2)
polygon(fw.specific.vertices,col="gray",border=NA)
plot(w,fw,type="l",ylab="f(w)")+ abline(h=0,col="gray",lty=2)+polygon(fw.specific.vertices,col="gray",border=NA)+abline(v=55.2,lty=3)+text(50,0.005,labels=fw.specific.area)
(55.2^2-80*55.2-40^2+80*40)/1250
Fw <- rep(0,length(w))
 Fw[lower.w] <- (w[lower.w]^2-80*w[lower.w]+1600)/1250
 Fw[upper.w] <- (180*w[upper.w]-w[upper.w]^2-6850)/1250
 Fw[w>90] <- 1
plot(w,Fw,type="l",ylab="F(w)")+abline(h=c(0,1),col="gray",lty=2)
plot(w,Fw,type="l",ylab="F(w)")+abline(h=c(0,1),col="gray",lty=2)+abline(v=55.2,lty=3)+abline(h=fw.specific.area,lty=3)
plot(w,w*fw,type="l",ylab="wf(w)")
plot(w,(w-65)^2*fw,type="l",ylab="(w-65)^2 f(w)")
sqrt(104.1667)
save.image("C:\\Users\\Min Jin\\Desktop\\advancedstatistic\\Chapter13-15.RData")
