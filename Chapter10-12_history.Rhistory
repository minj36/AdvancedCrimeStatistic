foo[i,j] <- loopvec1[i]+loopvec2[j]
}
}
foo
while(loopcondition){
do any code in here
}
myval <- 5
while(myval<10){
myval <- myval+1
cat("\n'myval' is now",myval,"\n")
cat("'mycondition' is now",myval<10,"\n")
}
mylist <- list()
counter <- 1
mynumbers <- c(4,5,1,2,6,2,4,6,6,2)
mycondition <- mynumbers[counter]<=5
while(mycondition){mylist[[counter]] <- diag(mynumbers[counter])
counter <- counter+1
if(counter<=length(mynumbers)){
mycondition <- mynumbers[counter]<=5
} else {
mycondition <- FALSE
}
}
mylist
foo <- matrix(1:12,4,3)
foo
sum(foo)
row.totals <- rep(NA,times=nrow(foo))
for(i in 1:nrow(foo)){
row.totals[i] <- sum(foo[i,])
}
row.totals
apply(X=foo,MARGIN=2,FUN=sum)
bar <- array(1:18,dim=c(3,3,2))
bar
apply(bar,3,FUN=diag)
dia.url <- "http://www.amstat.org/publications/jse/v9n2/4cdata.txt"
diamonds <- read.table(dia.url)
baz <- list(aa=c(3.4,1),bb=matrix(1:4,2,2),cc=matrix(c(T,T,F,T,F,F),3,2),
dd="string here",ee=matrix(c("red","green","blue","yellow")))
lapply(baz,FUN=is.matrix)
sapply(baz,FUN=is.matrix)
apply(foo,1,sort,decreasing=TRUE)
foo <- 5
bar <- c(2,3,1.1,4,0,4.1,3)
> loop1.result <- rep(NA,length(bar))
loop1.result <- rep(NA,length(bar))
loop1.result
for(i in 1:length(bar)){
temp <- foo/bar[i]
if(is.finite(temp)){
loop1.result[i] <- temp
} else {
break
}
}
loop1.result
loop2.result <- rep(NA,length(bar))
loop2.result
for(i in 1:length(bar)){
if(bar[i]==0){
next
}
loop2.result[i] <- foo/bar[i]
}
loop2.result
loopvec1 <- 5:7
loopvec1
loopvec2 <- 9:6
loopvec2
baz <- matrix(NA,length(loopvec1),length(loopvec2))
baz
for(i in 1:length(loopvec1)){
for(j in 1:length(loopvec2)){
temp <- loopvec1[i]*loopvec2[j]
if(temp>=54){
next
}
baz[i,j] <- temp
}
}
baz
> fib.a <- 1
fib.a <- 1
fib.b <- 1
repeat{
temp <- fib.a+fib.b
fib.a <- fib.b
fib.b <- temp
cat(fib.b,", ",sep="")
if(fib.b>150){
cat("BREAK NOW...\n")
break
}
}
myfib <- function(){
fib.a <- 1
fib.b <- 1
cat(fib.a,", ",fib.b,", ",sep="")
repeat{
temp <- fib.a+fib.b
fib.a <- fib.b
fib.b <- temp
cat(fib.b,", ",sep="")
if(fib.b>150){
cat("BREAK NOW...")
break
}
}
}
myfib <- function(){
fib.a <- 1
fib.b <- 1
cat(fib.a,", ",fib.b,", ",sep="")
repeat{
temp <- fib.a+fib.b
fib.a <- fib.b
fib.b <- temp
cat(fib.b,", ",sep="")
if(fib.b>150){
cat("BREAK NOW...")
break
}
}
}
myfib()
myfib2 <- function(thresh){
fib.a <- 1
fib.b <- 1
cat(fib.a,", ",fib.b,", ",sep="")
repeat{
temp <- fib.a+fib.b
fib.a <- fib.b
fib.b <- temp
cat(fib.b,", ",sep="")
if(fib.b>thresh){
cat("BREAK NOW...")
break
}
}
}
myfib2(thresh=150)
myfib2(1000000)
myfib3 <- function(thresh){
fibseq <- c(1,1)
counter <- 2
repeat{
fibseq <- c(fibseq,fibseq[counter-1]+fibseq[counter])
counter <- counter+1
if(fibseq[counter]>thresh){
break
}
}
return(fibseq)
}
myfib3(150)
foo <- myfib3(10000)
foo
bar <- foo[1:5]
bar
dummy1 <- function(){
aa <- 2.5
bb <- "string me along"
cc <- "string 'em up"
dd <- 4:8
}
dummy2 <- function(){
aa <- 2.5
bb <- "string me along"
cc <- "string 'em up"
dd <- 4:8
return(dd)
}
foo <- dummy1()
foo
bar <- dummy2()
bar
dummy3 <- function(){
aa <- 2.5
bb <- "string me along"
return(aa)
cc <- "string 'em up"
dd <- 4:8
return(bb)
}
baz <- dummy3()
baz
multiples1 <- function(x,mat,str1,str2){
matrix.flags <- sapply(x,FUN=is.matrix)
if(!any(matrix.flags)){
return(str1)
}
indexes <- which(matrix.flags)
counter <- 0
result <- list()
for(i in indexes){
temp <- x[[i]]
if(ncol(temp)==nrow(mat)){
counter <- counter+1
result[[counter]] <- temp%*%mat
}
}
if(counter==0){
return(str2)
} else {
return(result)
}
}
foo <- list(matrix(1:4,2,2),"not a matrix",
"definitely not a matrix",matrix(1:8,2,4),matrix(1:8,4,2))
bar <- list(1:4,"not a matrix",c(F,T,T,T),"??")
baz <- list(1:4,"not a matrix",c(F,T,T,T),"??",matrix(1:8,2,4))
multiples1(x=foo,mat=diag(2),str1="no matrices in 'x'",
str2="matrices in 'x' but none of appropriate dimensions given
'mat'")
multiples1(x=bar,mat=diag(2),str1="no matrices in 'x'",
str2="matrices in 'x' but none of appropriate dimensions given
'mat'")
multiples1(x=baz,mat=diag(2),str1="no matrices in 'x'",
str2="matrices in 'x' but none of appropriate dimensions given
'mat'")
multiples1(x=foo,mat=diag(2))
multiples1(x=bar,mat=diag(2))
multiples2 <- function(x,mat,str1="no valid matrices",str2=str1){
matrix.flags <- sapply(x,FUN=is.matrix)
if(!any(matrix.flags)){
return(str1)
}
indexes <- which(matrix.flags)
counter <- 0
result <- list()
for(i in indexes){
temp <- x[[i]]
if(ncol(temp)==nrow(mat)){
counter <- counter+1
result[[counter]] <- temp%*%mat
}
}
if(counter==0){
return(str2)
} else {
return(result)
}
}
multiples2(foo,mat=diag(2))
multiples2(bar,mat=diag(2))
multiples2(baz,mat=diag(2))
multiples3 <- function(x,mat,str1,str2){
matrix.flags <- sapply(x,FUN=is.matrix)
if(!any(matrix.flags)){
if(missing(str1)){
return("'str1' was missing, so this is the message")
} else {
return(str1)
}
}
indexes <- which(matrix.flags)
counter <- 0
result <- list()
for(i in indexes){
temp <- x[[i]]
if(ncol(temp)==nrow(mat)){
counter <- counter+1
result[[counter]] <- temp%*%mat
}
}
if(counter==0){
if(missing(str2)){
return("'str2' was missing, so this is the message")
} else {
return(str2)
}
} else {
return(result)
}
}
multiples3(foo,diag(2))
multiples3(bar,diag(2))
multiples3(baz,diag(2))
myfibplot <- function(thresh,plotit=TRUE,...){
fibseq <- c(1,1)
counter <- 2
repeat{
fibseq <- c(fibseq,fibseq[counter-1]+fibseq[counter])
counter <- counter+1
if(fibseq[counter]>thresh){
break
}
}
if(plotit){
plot(1:length(fibseq),fibseq,...)
} else {
return(fibseq)
}
}
myfibplot(150)
myfibplot(150,type="b",pch=4,lty=2,main="Terms of the Fibonacci sequence",
ylab="Fibonacci number",xlab="Term (n)")
unpackme <- function(...){
x <- list(...)
cat("Here is ... in its entirety as a list:\n")
print(x)
cat("\nThe names of ... are:",names(x),"\n\n")
cat("\nThe classes of ... are:",sapply(x,class))
}
unpackme(aa=matrix(1:4,2,2),bb=TRUE,cc=c("two","strings"),
dd=factor(c(1,1,2,1)))
multiples_helper_ext <- function(x,matrix.flags,mat){
indexes <- which(matrix.flags)
counter <- 0
result <- list()
for(i in indexes){
temp <- x[[i]]
if(ncol(temp)==nrow(mat)){
counter <- counter+1
result[[counter]] <- temp%*%mat
}
}
return(list(result,counter))
}
multiples4 <- function(x,mat,str1="no valid matrices",str2=str1){
matrix.flags <- sapply(x,FUN=is.matrix)
if(!any(matrix.flags)){
return(str1)
}
helper.call <- multiples_helper_ext(x,matrix.flags,mat)
result <- helper.call[[1]]
counter <- helper.call[[2]]
if(counter==0){
return(str2)
} else {
return(result)
}
}
multiples5 <- function(x,mat,str1="no valid matrices",str2=str1){
matrix.flags <- sapply(x,FUN=is.matrix)
if(!any(matrix.flags)){
return(str1)
}
multiples_helper_int <- function(x,matrix.flags,mat){
indexes <- which(matrix.flags)
counter <- 0
result <- list()
for(i in indexes){
temp <- x[[i]]
if(ncol(temp)==nrow(mat)){
counter <- counter+1
result[[counter]] <- temp%*%mat
}
}
return(list(result,counter))
}
helper.call <- multiples_helper_int(x,matrix.flags,mat)
result <- helper.call[[1]]
counter <- helper.call[[2]]
if(counter==0){
return(str2)
} else {
return(result)
}
}
foo <- matrix(c(2,3,3,4,2,4,7,3,3,6,7,2),3,4)
foo
apply(foo,MARGIN=2,FUN=function(x){sort(rep(x,2))})
myfibrec <- function(n){
if(n==1||n==2){
return(1)
} else {
return(myfibrec(n-1)+myfibrec(n-2))
}
}
myfibrec(5)
warn_test <- function(x){
if(x<=0){
warning("'x' is less than or equal to 0 but setting it to 1 and
continuing")
x <- 1
}
return(5/x)
}
error_test <- function(x){
if(x<=0){
stop("'x' is less than or equal to 0... TERMINATE")
}
return(5/x)
}
warn_test(0)
error_test(0)
myfibrec2 <- function(n){
if(n<0){
warning("Assuming you meant 'n' to be positive -- doing that instead")
n <- n*-1
} else if(n==0){
stop("'n' is uninterpretable at 0")
}
if(n==1||n==2){
return(1)
} else {
return(myfibrec2(n-1)+myfibrec2(n-2))
}
}
myfibrec2(6)
myfibrec2(-3)
myfibrec2(0)
attempt1 <- try(myfibrec2(0),silent=TRUE)
attempt1
attempt2 <- try(myfibrec2(6),silent=TRUE)
attempt2
myfibvector <- function(nvec){
nterms <- length(nvec)
result <- rep(0,nterms)
for(i in 1:nterms){
result[i] <- myfibrec2(nvec[i])
}
return(result)
}
foo <- myfibvector(nvec=c(1,2,10,8))
foo
bar <- myfibvector(nvec=c(3,2,7,0,9,13))
myfibvectorTRY <- function(nvec){
nterms <- length(nvec)
result <- rep(0,nterms)
for(i in 1:nterms){
attempt <- try(myfibrec2(nvec[i]),silent=T)
if(class(attempt)=="try-error"){
result[i] <- NA
} else {
result[i] <- attempt
}
}
return(result)
}
baz <- myfibvectorTRY(nvec=c(3,2,7,0,9,13))
baz
attempt3 <- try(myfibrec2(-3),silent=TRUE)
attempt3
attempt4 <- suppressWarnings(myfibrec2(-3))
attempt4
Sys.sleep(3)
sleep_test <- function(n){
result <- 0
for(i in 1:n){
result <- result + 1
Sys.sleep(0.5)
}
return(result)
}
sleep_test(8)
prog_test <- function(n){
result <- 0
progbar <- txtProgressBar(min=0,max=n,style=1,char="=")
for(i in 1:n){
result <- result + 1
Sys.sleep(0.5)
setTxtProgressBar(progbar,value=i)
}
close(progbar)
return(result)
}
prog_test(8)
Sys.time()
t1 <- Sys.time()
Sys.sleep(3)
t2 <- Sys.time()
t2-t1
t1 <- Sys.time()
Sys.sleep(3)
t2 <- Sys.time()
t2-t1
search()
foo <- c(4,1.5,3)
sum(foo)
sum <- function(x){
result <- 0
for(i in 1:length(x)){
result <- result + x[i]^2
}
return(result)
}
sum(foo)
base::sum(foo)
rm(sum)
library("spatstat")
install.packages("spatstat")
install.packages("spatstat")
library("spatstat")
library("car")
cats <- "meow"
library("MASS")
search()
detach("package:car",unload=TRUE)
search()
foo <- data.frame(surname=c("a","b","c","d"),
sex=c(0,1,1,0),height=c(170,168,181,180),
stringsAsFactors=F)
foo
attach(foo)
search()
surname
bar <- data.frame(surname=c("e","f","g","h"),
sex=c(1,0,1,0),weight=c(55,70,87,79),
stringsAsFactors=F)
bar
attach(bar)
search()
height
detach(foo)
search()
save.image("C:/Users/Min Jin/Desktop/Chapter10-12.RData")
savehistory("C:/Users/Min Jin/Desktop/Chapter10-12_history.Rhistory")
